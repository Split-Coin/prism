/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import "chai-bn";

import { chaiSolana, expectTX } from "@saberhq/chai-solana";
import { TransactionEnvelope } from "@saberhq/solana-contrib";
import { SystemProgram } from "@solana/web3.js";
import chai, { assert, expect } from "chai";

import { enumLikeToString, generatePrismEtfAddress } from "../../src";
import { coherenceHelper } from "../helper";

chai.use(chaiSolana);

describe("beamsplitter reintialization attack", () => {
  it("Reintialization attack should fail", async () => {
    const [initPrismEtFTx, prismEtfMint] =
      await coherenceHelper.sdk.initPrismEtf({
        beamsplitter: coherenceHelper.beamsplitter,
      });

    await expectTX(initPrismEtFTx, "Initialize asset with assetToken").to.be
      .fulfilled;

    const prismEtf = await coherenceHelper.sdk.fetchPrismEtfDataFromSeeds({
      beamsplitter: coherenceHelper.beamsplitter,
      prismEtfMint,
    });

    if (!prismEtf) {
      assert.fail("Prism Etf was not successfully created");
    }

    assert(prismEtf.manager.equals(coherenceHelper.authority));
    expect(enumLikeToString(prismEtf.status)).to.be.equal("unfinished");

    const [prismEtfPda, bump] = await generatePrismEtfAddress(
      prismEtfMint,
      coherenceHelper.beamsplitter
    );

    const initPrismEtfAgainTx = new TransactionEnvelope(
      coherenceHelper.provider,
      [
        coherenceHelper.sdk.program.instruction.initPrismEtf(bump, {
          accounts: {
            prismEtf: prismEtfPda,
            prismEtfMint,
            weightedTokens: prismEtf.weightedTokens,
            manager: coherenceHelper.authority,
            beamsplitter: coherenceHelper.beamsplitter,
            systemProgram: SystemProgram.programId,
          },
        }),
      ]
    );

    await expectTX(initPrismEtfAgainTx).to.be.rejectedWith(
      "Signature verification failed"
    );
  });
});
