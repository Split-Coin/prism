/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import "chai-bn";

import { chaiSolana, expectTX } from "@saberhq/chai-solana";
import { TransactionEnvelope } from "@saberhq/solana-contrib";
import { SystemProgram } from "@solana/web3.js";
import chai, { assert, expect } from "chai";

import type { UserPrismEtf } from "../../src";
import { enumLikeToString, PrismEtf } from "../../src";
import { coherenceHelper } from "../coherenceBeamsplitterTest";

chai.use(chaiSolana);

export default function beamsplitterReinitializationAttack() {
  it("Reintialization attack should fail", async () => {
    const [initPrismEtFTx, prismEtfMint, prismEtfPda, _, prismEtfBump] =
      await coherenceHelper.sdk.beamsplitter.initPrismEtf({});

    await expectTX(initPrismEtFTx, "Initialize asset with assetToken").to.be
      .fulfilled;

    const prismEtf = await PrismEtf.loadPrismEtf({
      beamsplitter: coherenceHelper.sdk.beamsplitter,
      prismEtfMint,
      userPrismEtf: {} as UserPrismEtf,
    });

    if (!prismEtf.prismEtfData) {
      assert.fail("Prism Etf was not successfully created");
    }

    assert(prismEtf.prismEtfData.manager.equals(coherenceHelper.authority));
    expect(enumLikeToString(prismEtf.prismEtfData.status)).to.be.equal(
      "unfinished"
    );

    const initPrismEtfAgainTx = new TransactionEnvelope(
      coherenceHelper.provider,
      [
        coherenceHelper.sdk.loader.program.instruction.initPrismEtf(
          prismEtfBump,
          {
            accounts: {
              prismEtf: prismEtfPda,
              prismEtfMint,
              weightedTokens: prismEtf.prismEtfData.weightedTokens,
              manager: coherenceHelper.authority,
              beamsplitter: coherenceHelper.beamsplitter,
              systemProgram: SystemProgram.programId,
            },
          }
        ),
      ]
    );

    await expectTX(initPrismEtfAgainTx).to.be.rejectedWith(
      "Signature verification failed"
    );
  });
}
